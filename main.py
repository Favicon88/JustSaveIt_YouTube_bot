from dotenv import dotenv_values
import random
import sqlite3
import telebot
from requests.exceptions import ReadTimeout
import json
import yt_dlp


env = {
    **dotenv_values("/home/ChatGPT_telegram_bot/.env.prod"),
    **dotenv_values(".env.dev"),  # override
}

bot = telebot.TeleBot(env["TG_BOT_TOKEN"])
db_link = env["DB_LINK"]

REKLAMA_MSG = [
    "üî• –í–∞–ª—é—Ç–Ω—ã–π –≤–∫–ª–∞–¥ –¥–ª—è —Ä–æ—Å—Å–∏—è–Ω (–¥–æ 12% –≥–æ–¥–æ–≤—ã—Ö) https://crypto-fans.club",
    "üî• –ï—Å–ª–∏ –¥—É–º–∞–µ—à—å –∫—É–ø–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é Bybit https://cutt.ly/D7rsbVG",
    "üî• –ï—Å–ª–∏ –¥—É–º–∞–µ—à—å –∫—É–ø–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é Binance https://cutt.ly/87rsjAV",
]


def write_to_db(message):
    conn = sqlite3.connect(db_link)
    cursor = conn.cursor()
    select_id = cursor.execute(
        "SELECT id FROM user WHERE chat_id = ?", (str(message.chat.id),)
    )
    select_id = select_id.fetchone()
    if select_id:
        try:
            cursor.execute(
                "UPDATE user SET last_msg=?, last_login=? WHERE chat_id=?",
                (
                    message.text,
                    str(message.date),
                    str(message.chat.id),
                ),
            )
        except:
            conn.commit()
            conn.close()
            bot.send_message(
                612063160,
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ (INSERT) –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.chat.id}",
            )
    else:
        try:
            cursor.execute(
                "INSERT INTO user (chat_id, last_login, username, first_name, last_name, last_msg) VALUES (?,?,?,?,?,?)",
                (
                    str(message.chat.id),
                    str(message.date),
                    message.chat.username if message.chat.username else "-",
                    message.chat.first_name
                    if message.chat.first_name
                    else "-",
                    message.chat.last_name if message.chat.last_name else "-",
                    message.text,
                ),
            )
        except:
            conn.commit()
            conn.close()
            bot.send_message(
                612063160,
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ (INSERT) –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.chat.id}",
            )
    conn.commit()
    conn.close()


def make_request(message, api_key_numb):
    chance = random.choices((0, 1, 2, 3, 4, 5, 6, 7, 8, 9))
    try:
        bot.send_message(message.chat.id, piece_of_answer)
        if chance == [1]:
            bot.send_message(message.chat.id, random.choices(REKLAMA_MSG))
    except ReadTimeout:
        bot.send_message(
            message.chat.id,
            "ChatGPT –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å–∞–º–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å —á—É—Ç—å –ø–æ–∑–∂–µ.",
        )


def create_table():
    """Create table if not exists."""

    conn = sqlite3.connect(db_link)
    cursor = conn.cursor()
    cursor.execute(
        """
        CREATE TABLE IF NOT EXISTS user(
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id TEXT,
            last_login TEXT,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            last_msg TEXT
        );
        """
    )
    conn.commit()
    conn.close()


@bot.message_handler(commands=["start"])
def send_start(message):
    text = """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é ‚úå

–Ø - ChatGPT, –∫—Ä—É–ø–Ω–µ–π—à–∞—è —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å, —Å–æ–∑–¥–∞–Ω–Ω–∞—è OpenAI. 

–Ø —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –∏ –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, 
–æ–±—Å—É–¥–∏—Ç—å —Ç–µ–º—ã –∏–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–µ–º—ã.

üî•–í —Ç–æ–º —á–∏—Å–ª–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ....üî•

üëá–Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ãüëá
"""
    write_to_db(message)
    bot.send_message(message.chat.id, text)


@bot.message_handler(content_types=["text"])
def send_msg_to_chatgpt(message):
    write_to_db(message)
    make_request(message, api_key_numb)


if __name__ == "__main__":
    yt_opts = {}
    url = "https://www.youtube.com/shorts/j-AkzBTmrTs"
    ydl_opts = {}
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        # info = ydl.extract_info(url, download=False)
        ydl.download(url)

        # ‚ÑπÔ∏è ydl.sanitize_info makes the info json-serializable
        # print(json.dumps(ydl.sanitize_info(info)))
    # videos = yt.get_videos()
    # print(yt)
    # key_end = False
    # create_table()
    # target = bot.infinity_polling()
